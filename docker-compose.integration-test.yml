services:
  sut: # System under test: waits until backend container is ready so that sut can run its tests which make requests to backend
    image: ${TESTING_IMAGE}
    depends_on:
      backend:
        condition: service_healthy
    environment:
      CI_BACKEND: backend
    command: npm run ci-integration-test
  backend:
    image: ${TESTING_IMAGE}
    init: true
    depends_on:
      db:
        condition: service_healthy
      my-redis:
        condition: service_healthy
    environment:
      COOKIES_SECRET: ${COOKIES_SECRET}
      CSRF_SECRET: ${CSRF_SECRET}
      CSRF_COOKIE_NAME: ${CSRF_COOKIE_NAME}
      REDIS_HOST: my-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 5s
      timeout: 3s
      retries: 10
    command: /bin/sh -c "npm run seed:migrate:reset && npm run dev"
    expose:
      - "3000"
  db:
    image: postgres:15.1-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 5s
      timeout: 3s
      retries: 10
    expose:
      - "5432"
  my-redis:
    image: redis:alpine3.16
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    expose:
      - "6379"
    restart: unless-stopped
volumes:
  pgdata:
  redis-data:
