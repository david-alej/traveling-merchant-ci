services:
  sut: # System under test: waits until backend container is ready so that sut can run its tests which make requests to backend
    image: tm-backend-ci
    depends_on:
      backend:
        condition: service_healthy
    environment:
      CI_BACKEND: backend
    command: npm run ci-integration-test
  backend:
    image: tm-backend-ci
    init: true
    depends_on:
      migrations:
        condition: service_completed_successfully
      my-redis:
        condition: service_healthy
    environment:
      COOKIES_SECRET: AwW5XWhJhxfLZUtgzC_LLDhgN6yTaeNGLVXk27m1R53D7K3aBwTkLrDYYZaLe_WB
      CSRF_SECRET: 2ESeKzkR4QdQ5-SqWWF0RANSaitHUJ8d9YbZUu1lpr0R-cIffCzBKDJHQ7z5KNSd
      CSRF_COOKIE_NAME: psifi.x-csrf-token
      REDIS_HOST: my-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 5s
      timeout: 3s
      retries: 10
    expose:
      - "3000"
  migrations:
    image: tm-backend-ci
    build:
      target: test
      context: ./backend/
      dockerfile: ./dockerfiles/Dockerfile.10
    depends_on:
      db:
        condition: service_healthy
    command: ["sh", "-c", "npm run seed:migrate:reset"]
    restart: "no"
  db:
    image: postgres:15.1-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 5s
      timeout: 3s
      retries: 10
    expose:
      - "5432"
  my-redis:
    image: redis:alpine3.16
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    expose:
      - "6379"
    restart: unless-stopped
volumes:
  pgdata:
  redis-data:
