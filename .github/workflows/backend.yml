---
name: Backend Jobs by Brett Fisher

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # FIRST JOB #######################################################################
  build-test-image:
    name: Build Image for Testing
    runs-on: ubuntu-latest
    environment: test

    permissions:
      packages: write # needed to push docker image to ghcr.io

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to Docker
        uses: docker/build-push-action@v6
        with:
          file: ./backend/dockerfiles/Dockerfile.10
          context: ./backend
          push: true
          tags: davidalej/tm-backend-ci:${{ github.run_id || secrets.GITHUB_RUN_ID}}
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # NEXT JOB #######################################################################
  test-unit:
    name: Unit tests in Docker
    needs: [build-test-image]
    runs-on: ubuntu-latest
    environment: test

    permissions:
      packages: read

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Unit Testing in Docker
        run: docker run --rm davidalej/tm-backend-ci:"$GITHUB_RUN_ID" npm run ci-unit-test

  # NEXT JOB #######################################################################
  test-integration:
    name: Integration tests in Compose
    needs: [build-test-image]
    runs-on: ubuntu-latest
    environment: test
    env:
      TESTING_IMAGE: davidalej/tm-backend-ci:${{ github.run_id || secrets.GITHUB_RUN_ID }}
      COOKIES_SECRET: ${{ secrets.COOKIES_SECRET }}
      CSRF_SECRET: ${{ secrets.CSRF_SECRET }}
      CSRF_COOKIE_NAME: ${{ secrets.CSRF_COOKIE_NAME }}
    permissions:
      packages: read

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run integration tests with Docker Compose
        run: |
          docker compose -f docker-compose.integration-test.yml \
            up --build --exit-code-from sut

  # NEXT JOB #######################################################################
  test-k3d:
    name: Test Deployment in Kubernetes
    needs: [build-test-image]
    runs-on: ubuntu-latest
    environment: test

    permissions:
      packages: read

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

      - name: Smoke test deployment in k3d Kubernetes
        run: |
          kubectl create secret docker-registry regcred \
            --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-password=${{ secrets.DOCKERHUB_TOKEN }}
          kubectl create secret generic backend-secrets \
            --from-literal=COOKIES_SECRET=${{ secrets.COOKIES_SECRET }} \
            --from-literal=CSRF_SECRET=${{ secrets.CSRF_SECRET }} \
            --from-literal=CSRF_COOKIE_NAME=${{ secrets.CSRF_COOKIE_NAME }}
          kubectl apply -f manifests/01-db.yml
          kubectl apply -f manifests/02-my-redis.yml
          export TESTING_IMAGE=davidalej/tm-backend-ci:"$GITHUB_RUN_ID"
          envsubst < manifests/03-backend.yml  | kubectl apply -f -
          kubectl rollout status deployment backend

      - name: Debug all job/pod logs on failure
        if: always()
        run: |
          echo "==== Jobs ===="
          kubectl get jobs -A
          echo "==== Pods ===="
          kubectl get pods -A -o wide
          echo "==== All pod logs ===="
          for pod in $(kubectl get pods -o name); do
            echo "---- Logs from $pod ----"
            kubectl logs "$pod" || true
          done

  # NEXT JOB .github/workflows/backend.yml#######################################################################
  scan-image:
    name: Scan Image with Trivy
    needs: [build-test-image]
    runs-on: ubuntu-latest
    environment: test

    permissions:
      contents: read # for actions/checkout to fetch code
      packages: read # needed to pull docker image to ghcr.io
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull davidalej/tm-backend-ci:"$GITHUB_RUN_ID"

      - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: davidalej/tm-backend-ci:${{ github.run_id || secrets.GITHUB_RUN_ID }}
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "HIGH,CRITICAL"
          format: "sarif"
          output: "trivy-results.sarif"
          limit-severities-for-sarif: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
          token: ${{ secrets.GITHUB_TOKEN }}

  # NEXT JOB #######################################################################
  build-final-image:
    name: Build Final Image
    needs: [test-unit, test-integration, test-k3d, scan-image]
    runs-on: ubuntu-latest
    environment: test

    permissions:
      packages: write # needed to push docker image to ghcr.io
      pull-requests: write # needed to create and update comments in PRs

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Metadata for Final Image Build
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: davidalej/tm-backend-ci
          flavor: |
            latest=false
          tags: |
            type=raw,value=99
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Docker Build and Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          file: ./backend/dockerfiles/Dockerfile.10
          context: ./backend
          target: production
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
